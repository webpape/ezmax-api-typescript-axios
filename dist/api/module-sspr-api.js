"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleSsprApi = exports.ModuleSsprApiFactory = exports.ModuleSsprApiFp = exports.ModuleSsprApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ModuleSsprApi - axios parameter creator
 * @export
 */
const ModuleSsprApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password Request
         * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordRequestV1: (ssprResetPasswordRequestV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprResetPasswordRequestV1Request' is not null or undefined
            common_1.assertParamExists('ssprResetPasswordRequestV1', 'ssprResetPasswordRequestV1Request', ssprResetPasswordRequestV1Request);
            const localVarPath = `/1/module/sspr/resetPasswordRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprResetPasswordRequestV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password
         * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordV1: (ssprResetPasswordV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprResetPasswordV1Request' is not null or undefined
            common_1.assertParamExists('ssprResetPasswordV1', 'ssprResetPasswordV1Request', ssprResetPasswordV1Request);
            const localVarPath = `/1/module/sspr/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprResetPasswordV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
         * @summary Send username(s)
         * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprSendUsernamesV1: (ssprSendUsernamesV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprSendUsernamesV1Request' is not null or undefined
            common_1.assertParamExists('ssprSendUsernamesV1', 'ssprSendUsernamesV1Request', ssprSendUsernamesV1Request);
            const localVarPath = `/1/module/sspr/sendUsernames`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprSendUsernamesV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account Request
         * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountRequestV1: (ssprUnlockAccountRequestV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprUnlockAccountRequestV1Request' is not null or undefined
            common_1.assertParamExists('ssprUnlockAccountRequestV1', 'ssprUnlockAccountRequestV1Request', ssprUnlockAccountRequestV1Request);
            const localVarPath = `/1/module/sspr/unlockAccountRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprUnlockAccountRequestV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account
         * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountV1: (ssprUnlockAccountV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprUnlockAccountV1Request' is not null or undefined
            common_1.assertParamExists('ssprUnlockAccountV1', 'ssprUnlockAccountV1Request', ssprUnlockAccountV1Request);
            const localVarPath = `/1/module/sspr/unlockAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprUnlockAccountV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Validate Token
         * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprValidateTokenV1: (ssprValidateTokenV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ssprValidateTokenV1Request' is not null or undefined
            common_1.assertParamExists('ssprValidateTokenV1', 'ssprValidateTokenV1Request', ssprValidateTokenV1Request);
            const localVarPath = `/1/module/sspr/validateToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ssprValidateTokenV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ModuleSsprApiAxiosParamCreator = ModuleSsprApiAxiosParamCreator;
/**
 * ModuleSsprApi - functional programming interface
 * @export
 */
const ModuleSsprApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModuleSsprApiAxiosParamCreator(configuration);
    return {
        /**
         * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password Request
         * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password
         * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordV1(ssprResetPasswordV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprResetPasswordV1(ssprResetPasswordV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
         * @summary Send username(s)
         * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprSendUsernamesV1(ssprSendUsernamesV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprSendUsernamesV1(ssprSendUsernamesV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account Request
         * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account
         * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountV1(ssprUnlockAccountV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprUnlockAccountV1(ssprUnlockAccountV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Validate Token
         * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprValidateTokenV1(ssprValidateTokenV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ssprValidateTokenV1(ssprValidateTokenV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ModuleSsprApiFp = ModuleSsprApiFp;
/**
 * ModuleSsprApi - factory interface
 * @export
 */
const ModuleSsprApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModuleSsprApiFp(configuration);
    return {
        /**
         * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password Request
         * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options) {
            return localVarFp.ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Reset Password
         * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprResetPasswordV1(ssprResetPasswordV1Request, options) {
            return localVarFp.ssprResetPasswordV1(ssprResetPasswordV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
         * @summary Send username(s)
         * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprSendUsernamesV1(ssprSendUsernamesV1Request, options) {
            return localVarFp.ssprSendUsernamesV1(ssprSendUsernamesV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account Request
         * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options) {
            return localVarFp.ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Unlock Account
         * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprUnlockAccountV1(ssprUnlockAccountV1Request, options) {
            return localVarFp.ssprUnlockAccountV1(ssprUnlockAccountV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
         * @summary Validate Token
         * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssprValidateTokenV1(ssprValidateTokenV1Request, options) {
            return localVarFp.ssprValidateTokenV1(ssprValidateTokenV1Request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ModuleSsprApiFactory = ModuleSsprApiFactory;
/**
 * ModuleSsprApi - object-oriented interface
 * @export
 * @class ModuleSsprApi
 * @extends {BaseAPI}
 */
class ModuleSsprApi extends base_1.BaseAPI {
    /**
     * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password Request
     * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password
     * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprResetPasswordV1(ssprResetPasswordV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprResetPasswordV1(ssprResetPasswordV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
     * @summary Send username(s)
     * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprSendUsernamesV1(ssprSendUsernamesV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprSendUsernamesV1(ssprSendUsernamesV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account Request
     * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account
     * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprUnlockAccountV1(ssprUnlockAccountV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprUnlockAccountV1(ssprUnlockAccountV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Validate Token
     * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprValidateTokenV1(ssprValidateTokenV1Request, options) {
        return exports.ModuleSsprApiFp(this.configuration).ssprValidateTokenV1(ssprValidateTokenV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModuleSsprApi = ModuleSsprApi;
