/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { SsprResetPasswordRequestV1Request } from '../models';
import { SsprResetPasswordV1Request } from '../models';
import { SsprSendUsernamesV1Request } from '../models';
import { SsprUnlockAccountRequestV1Request } from '../models';
import { SsprUnlockAccountV1Request } from '../models';
import { SsprValidateTokenV1Request } from '../models';
/**
 * ModuleSsprApi - axios parameter creator
 * @export
 */
export declare const ModuleSsprApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password Request
     * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordRequestV1: (ssprResetPasswordRequestV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password
     * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordV1: (ssprResetPasswordV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
     * @summary Send username(s)
     * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprSendUsernamesV1: (ssprSendUsernamesV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account Request
     * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountRequestV1: (ssprUnlockAccountRequestV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account
     * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountV1: (ssprUnlockAccountV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Validate Token
     * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprValidateTokenV1: (ssprValidateTokenV1Request: any, options?: any) => Promise<RequestArgs>;
};
/**
 * ModuleSsprApi - functional programming interface
 * @export
 */
export declare const ModuleSsprApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password Request
     * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password
     * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordV1(ssprResetPasswordV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
     * @summary Send username(s)
     * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprSendUsernamesV1(ssprSendUsernamesV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account Request
     * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account
     * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountV1(ssprUnlockAccountV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Validate Token
     * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprValidateTokenV1(ssprValidateTokenV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ModuleSsprApi - factory interface
 * @export
 */
export declare const ModuleSsprApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password Request
     * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request: any, options?: any): AxiosPromise<void>;
    /**
     * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password
     * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprResetPasswordV1(ssprResetPasswordV1Request: any, options?: any): AxiosPromise<void>;
    /**
     * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
     * @summary Send username(s)
     * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprSendUsernamesV1(ssprSendUsernamesV1Request: any, options?: any): AxiosPromise<void>;
    /**
     * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account Request
     * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request: any, options?: any): AxiosPromise<void>;
    /**
     * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account
     * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprUnlockAccountV1(ssprUnlockAccountV1Request: any, options?: any): AxiosPromise<void>;
    /**
     * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Validate Token
     * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ssprValidateTokenV1(ssprValidateTokenV1Request: any, options?: any): AxiosPromise<void>;
};
/**
 * ModuleSsprApi - object-oriented interface
 * @export
 * @class ModuleSsprApi
 * @extends {BaseAPI}
 */
export declare class ModuleSsprApi extends BaseAPI {
    /**
     * This endpoint sends an email with a link to reset the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password Request
     * @param {SsprResetPasswordRequestV1Request} ssprResetPasswordRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprResetPasswordRequestV1(ssprResetPasswordRequestV1Request: SsprResetPasswordRequestV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint resets the user\'s password.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Reset Password
     * @param {SsprResetPasswordV1Request} ssprResetPasswordV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprResetPasswordV1(ssprResetPasswordV1Request: SsprResetPasswordV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
     * @summary Send username(s)
     * @param {SsprSendUsernamesV1Request} ssprSendUsernamesV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprSendUsernamesV1(ssprSendUsernamesV1Request: SsprSendUsernamesV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account Request
     * @param {SsprUnlockAccountRequestV1Request} ssprUnlockAccountRequestV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprUnlockAccountRequestV1(ssprUnlockAccountRequestV1Request: SsprUnlockAccountRequestV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Unlock Account
     * @param {SsprUnlockAccountV1Request} ssprUnlockAccountV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprUnlockAccountV1(ssprUnlockAccountV1Request: SsprUnlockAccountV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR = EzsignUser  sUserLoginname must be set if eUserTypeSSPR = Native
     * @summary Validate Token
     * @param {SsprValidateTokenV1Request} ssprValidateTokenV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleSsprApi
     */
    ssprValidateTokenV1(ssprValidateTokenV1Request: SsprValidateTokenV1Request, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
