"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.39
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleUserApi = exports.ModuleUserApiFactory = exports.ModuleUserApiFp = exports.ModuleUserApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
// @ts-ignore
const request_signature_1 = require("../api/request-signature");
/**
 * ModuleUserApi - axios parameter creator
 * @export
 */
const ModuleUserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The endpoint allows to initiate the creation or a user of type Ezsignuser.  The user will be created only once the email verification process will be completed
         * @summary Create a new User of type Ezsignuser
         * @param {Array<UserCreateEzsignuserV1Request>} userCreateEzsignuserV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreateEzsignuserV1: (userCreateEzsignuserV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userCreateEzsignuserV1Request' is not null or undefined
            common_1.assertParamExists('userCreateEzsignuserV1', 'userCreateEzsignuserV1Request', userCreateEzsignuserV1Request);
            const localVarPath = `/1/module/user/createezsignuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            let basePath = common_1.DUMMY_BASE_URL;
            if (configuration && configuration.basePath)
                basePath = configuration.basePath;
            const localVarUrlObj = new URL(localVarPath, basePath);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userCreateEzsignuserV1Request, localVarRequestOptions, configuration);
            // Signature
            if (configuration && configuration.apiKey) {
                const secret = configuration.getSecret();
                if (secret) {
                    const headers = {
                        authorization: configuration.apiKey,
                        secret: secret,
                        method: 'POST',
                        url: basePath + localVarPath,
                        body: localVarRequestOptions.data
                    };
                    const signatureHeaders = request_signature_1.RequestSignature.getHeaders(headers);
                    localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), signatureHeaders);
                }
            }
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ModuleUserApiAxiosParamCreator = ModuleUserApiAxiosParamCreator;
/**
 * ModuleUserApi - functional programming interface
 * @export
 */
const ModuleUserApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModuleUserApiAxiosParamCreator(configuration);
    return {
        /**
         * The endpoint allows to initiate the creation or a user of type Ezsignuser.  The user will be created only once the email verification process will be completed
         * @summary Create a new User of type Ezsignuser
         * @param {Array<UserCreateEzsignuserV1Request>} userCreateEzsignuserV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreateEzsignuserV1(userCreateEzsignuserV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userCreateEzsignuserV1(userCreateEzsignuserV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ModuleUserApiFp = ModuleUserApiFp;
/**
 * ModuleUserApi - factory interface
 * @export
 */
const ModuleUserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModuleUserApiFp(configuration);
    return {
        /**
         * The endpoint allows to initiate the creation or a user of type Ezsignuser.  The user will be created only once the email verification process will be completed
         * @summary Create a new User of type Ezsignuser
         * @param {Array<UserCreateEzsignuserV1Request>} userCreateEzsignuserV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreateEzsignuserV1(userCreateEzsignuserV1Request, options) {
            return localVarFp.userCreateEzsignuserV1(userCreateEzsignuserV1Request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ModuleUserApiFactory = ModuleUserApiFactory;
/**
 * ModuleUserApi - object-oriented interface
 * @export
 * @class ModuleUserApi
 * @extends {BaseAPI}
 */
class ModuleUserApi extends base_1.BaseAPI {
    /**
     * The endpoint allows to initiate the creation or a user of type Ezsignuser.  The user will be created only once the email verification process will be completed
     * @summary Create a new User of type Ezsignuser
     * @param {Array<UserCreateEzsignuserV1Request>} userCreateEzsignuserV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModuleUserApi
     */
    userCreateEzsignuserV1(userCreateEzsignuserV1Request, options) {
        return exports.ModuleUserApiFp(this.configuration).userCreateEzsignuserV1(userCreateEzsignuserV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModuleUserApi = ModuleUserApi;
