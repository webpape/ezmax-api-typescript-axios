"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectEzsigndocumentApi = exports.ObjectEzsigndocumentApiFactory = exports.ObjectEzsigndocumentApiFp = exports.ObjectEzsigndocumentApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ObjectEzsigndocumentApi - axios parameter creator
 * @export
 */
const ObjectEzsigndocumentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsign Template to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV1: (pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            common_1.assertParamExists('ezsigndocumentApplyEzsigntemplateV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID);
            // verify required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is not null or undefined
            common_1.assertParamExists('ezsigndocumentApplyEzsigntemplateV1', 'ezsigndocumentApplyEzsigntemplateV1Request', ezsigndocumentApplyEzsigntemplateV1Request);
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ezsigndocumentApplyEzsigntemplateV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV1: (ezsigndocumentCreateObjectV1Request, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ezsigndocumentCreateObjectV1Request' is not null or undefined
            common_1.assertParamExists('ezsigndocumentCreateObjectV1', 'ezsigndocumentCreateObjectV1Request', ezsigndocumentCreateObjectV1Request);
            const localVarPath = `/1/object/ezsigndocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ezsigndocumentCreateObjectV1Request, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeleteObjectV1: (pkiEzsigndocumentID, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            common_1.assertParamExists('ezsigndocumentDeleteObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID);
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve an existing Ezsigndocument\'s children IDs
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetChildrenV1: (pkiEzsigndocumentID, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            common_1.assertParamExists('ezsigndocumentGetChildrenV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID);
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getChildren`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetDownloadUrlV1: (pkiEzsigndocumentID, eDocumentType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            common_1.assertParamExists('ezsigndocumentGetDownloadUrlV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID);
            // verify required parameter 'eDocumentType' is not null or undefined
            common_1.assertParamExists('ezsigndocumentGetDownloadUrlV1', 'eDocumentType', eDocumentType);
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)))
                .replace(`{${"eDocumentType"}}`, encodeURIComponent(String(eDocumentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV1: (pkiEzsigndocumentID, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
            common_1.assertParamExists('ezsigndocumentGetObjectV1', 'pkiEzsigndocumentID', pkiEzsigndocumentID);
            const localVarPath = `/1/object/ezsigndocument/{pkiEzsigndocumentID}`
                .replace(`{${"pkiEzsigndocumentID"}}`, encodeURIComponent(String(pkiEzsigndocumentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ObjectEzsigndocumentApiAxiosParamCreator = ObjectEzsigndocumentApiAxiosParamCreator;
/**
 * ObjectEzsigndocumentApi - functional programming interface
 * @export
 */
const ObjectEzsigndocumentApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ObjectEzsigndocumentApiAxiosParamCreator(configuration);
    return {
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsign Template to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve an existing Ezsigndocument\'s children IDs
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ObjectEzsigndocumentApiFp = ObjectEzsigndocumentApiFp;
/**
 * ObjectEzsigndocumentApi - factory interface
 * @export
 */
const ObjectEzsigndocumentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ObjectEzsigndocumentApiFp(configuration);
    return {
        /**
         * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
         * @summary Apply an Ezsign Template to the Ezsigndocument.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options) {
            return localVarFp.ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
         * @summary Create a new Ezsigndocument
         * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options) {
            return localVarFp.ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options) {
            return localVarFp.ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve an existing Ezsigndocument\'s children IDs
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options) {
            return localVarFp.ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
         * @summary Retrieve a URL to download documents.
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options) {
            return localVarFp.ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve an existing Ezsigndocument
         * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options) {
            return localVarFp.ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ObjectEzsigndocumentApiFactory = ObjectEzsigndocumentApiFactory;
/**
 * ObjectEzsigndocumentApi - object-oriented interface
 * @export
 * @class ObjectEzsigndocumentApi
 * @extends {BaseAPI}
 */
class ObjectEzsigndocumentApi extends base_1.BaseAPI {
    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetChildrenV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options) {
        return exports.ObjectEzsigndocumentApiFp(this.configuration).ezsigndocumentGetObjectV1(pkiEzsigndocumentID, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ObjectEzsigndocumentApi = ObjectEzsigndocumentApi;
