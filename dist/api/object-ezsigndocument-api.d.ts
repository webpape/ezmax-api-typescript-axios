/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { EzsigndocumentApplyEzsigntemplateV1Request } from '../models';
import { EzsigndocumentApplyEzsigntemplateV1Response } from '../models';
import { EzsigndocumentCreateObjectV1Request } from '../models';
import { EzsigndocumentCreateObjectV1Response } from '../models';
import { EzsigndocumentDeleteObjectV1Response } from '../models';
import { EzsigndocumentGetDownloadUrlV1Response } from '../models';
import { EzsigndocumentGetObjectV1Response } from '../models';
/**
 * ObjectEzsigndocumentApi - axios parameter creator
 * @export
 */
export declare const ObjectEzsigndocumentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentApplyEzsigntemplateV1: (pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: any, options?: any) => Promise<RequestArgs>;
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentCreateObjectV1: (ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentDeleteObjectV1: (pkiEzsigndocumentID: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetChildrenV1: (pkiEzsigndocumentID: number, options?: any) => Promise<RequestArgs>;
    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetDownloadUrlV1: (pkiEzsigndocumentID: number, eDocumentType: 'Initial' | 'Signed' | 'Proof' | 'Proofdocument', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetObjectV1: (pkiEzsigndocumentID: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ObjectEzsigndocumentApi - functional programming interface
 * @export
 */
export declare const ObjectEzsigndocumentApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentApplyEzsigntemplateV1Response>>;
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentCreateObjectV1Response>>;
    /**
     *
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentDeleteObjectV1Response>>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetChildrenV1(pkiEzsigndocumentID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: 'Initial' | 'Signed' | 'Proof' | 'Proofdocument', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetDownloadUrlV1Response>>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EzsigndocumentGetObjectV1Response>>;
};
/**
 * ObjectEzsigndocumentApi - factory interface
 * @export
 */
export declare const ObjectEzsigndocumentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: any, options?: any): AxiosPromise<EzsigndocumentApplyEzsigntemplateV1Response>;
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: any): AxiosPromise<EzsigndocumentCreateObjectV1Response>;
    /**
     *
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: any): AxiosPromise<EzsigndocumentDeleteObjectV1Response>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetChildrenV1(pkiEzsigndocumentID: number, options?: any): AxiosPromise<void>;
    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: 'Initial' | 'Signed' | 'Proof' | 'Proofdocument', options?: any): AxiosPromise<EzsigndocumentGetDownloadUrlV1Response>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: any): AxiosPromise<EzsigndocumentGetObjectV1Response>;
};
/**
 * ObjectEzsigndocumentApi - object-oriented interface
 * @export
 * @class ObjectEzsigndocumentApi
 * @extends {BaseAPI}
 */
export declare class ObjectEzsigndocumentApi extends BaseAPI {
    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {EzsigndocumentApplyEzsigntemplateV1Request} ezsigndocumentApplyEzsigntemplateV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: EzsigndocumentApplyEzsigntemplateV1Request, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param {Array<EzsigndocumentCreateObjectV1Request>} ezsigndocumentCreateObjectV1Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request: Array<EzsigndocumentCreateObjectV1Request>, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Delete an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetChildrenV1(pkiEzsigndocumentID: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {'Initial' | 'Signed' | 'Proof' | 'Proofdocument'} eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: 'Initial' | 'Signed' | 'Proof' | 'Proofdocument', options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Retrieve an existing Ezsigndocument
     * @param {number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectEzsigndocumentApi
     */
    ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, options?: any): Promise<import("axios").AxiosResponse<any>>;
}
